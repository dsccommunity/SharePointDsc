trigger:
  branches:
    include:
      - master
  paths:
    include:
      - SharePointDsc/*
  tags:
    include:
      - "v*"
    exclude:
      - "*-*"
variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  testArtifactName: testResults
  defaultBranch: master

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: "Package Module"
        pool:
          vmImage: "windows-latest"
        steps:
          - pwsh: |
              dotnet tool install --global GitVersion.Tool --version 5.12.0
              $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
              $gitVersionObject.PSObject.Properties.ForEach{
                  Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
                  Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
              }
              Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
            displayName: Calculate ModuleVersion (GitVersion)

          - task: PowerShell@2
            name: package
            displayName: "Build & Package Module"
            inputs:
              filePath: "./build.ps1"
              arguments: "-ResolveDependency -tasks pack"
              pwsh: true
            env:
              ModuleVersion: $(NuGetVersionV2)

          - task: PublishPipelineArtifact@1
            displayName: "Publish Pipeline Artifact"
            inputs:
              targetPath: "$(buildFolderName)/"
              artifact: $(buildArtifactName)
              publishLocation: "pipeline"
              parallel: true

          - task: PublishPipelineArtifact@1
            displayName: "Publish Wiki Content Artifact"
            inputs:
              targetPath: "$(buildFolderName)/WikiContent"
              artifact: "WikiContent"
              publishLocation: "pipeline"
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
      - job: Test_HQRM
        displayName: "HQRM"
        pool:
          vmImage: "windows-2022"
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Pipeline Artifact"
            inputs:
              buildType: "current"
              artifactName: $(buildArtifactName)
              targetPath: "$(Build.SourcesDirectory)/$(buildFolderName)"

          - task: PowerShell@2
            name: test
            displayName: "Run HQRM Test"
            inputs:
              filePath: "./build.ps1"
              arguments: "-Tasks hqrmtest"
              pwsh: false

          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "NUnit"
              testResultsFiles: "output/testResults/NUnit*.xml"
              testRunTitle: "HQRM"

      - job: Test_Unit_2013
        displayName: "Unit SP2013"
        pool:
          vmImage: "windows-2022"
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Pipeline Artifact"
            inputs:
              buildType: "current"
              artifactName: $(buildArtifactName)
              targetPath: "$(Build.SourcesDirectory)/$(buildFolderName)"
          - task: PowerShell@2
            name: test
            displayName: "Run Unit Test for SP2013"
            inputs:
              filePath: "./build.ps1"
              arguments: "-Tasks test -PesterScript @(@{ Path = '$(Build.SourcesDirectory)/tests/Unit'; Parameters = @{SharePointCmdletModule = '$(Build.SourcesDirectory)/tests/Unit/Stubs/SharePoint/15.0.4805.1000/Microsoft.SharePoint.PowerShell.psm1' }})"
              pwsh: false

          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "NUnit"
              testResultsFiles: "$(buildFolderName)/$(testResultFolderName)/NUnit*.xml"
              testRunTitle: "Unit (SP2013)"

          - task: PublishPipelineArtifact@1
            displayName: "Publish CodeCoverage Artifact"
            inputs:
              targetPath: "$(buildFolderName)/$(testResultFolderName)/"
              artifactName: "CodeCoverage_2013"
              parallel: true

      - job: Test_Unit_2016
        displayName: "Unit SP2016"
        pool:
          vmImage: "windows-2022"
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Pipeline Artifact"
            inputs:
              buildType: "current"
              artifactName: $(buildArtifactName)
              targetPath: "$(Build.SourcesDirectory)/$(buildFolderName)"

          - task: PowerShell@2
            name: test
            displayName: "Run Unit Test for SP2016"
            inputs:
              filePath: "./build.ps1"
              arguments: "-Tasks test -PesterScript @(@{ Path = '$(Build.SourcesDirectory)/tests/Unit'; Parameters = @{SharePointCmdletModule = '$(Build.SourcesDirectory)/tests/Unit/Stubs/SharePoint/16.0.4456.1000/Microsoft.SharePoint.PowerShell.psm1' }})"
              pwsh: false

          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "NUnit"
              testResultsFiles: "$(buildFolderName)/$(testResultFolderName)/NUnit*.xml"
              testRunTitle: "Unit (SP2016)"

          - task: PublishPipelineArtifact@1
            displayName: "Publish CodeCoverage Artifact"
            inputs:
              targetPath: "$(buildFolderName)/$(testResultFolderName)/"
              artifactName: "CodeCoverage_2016"
              parallel: true

      - job: Test_Unit_2019
        displayName: "Unit SP2019"
        pool:
          vmImage: "windows-2022"
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Pipeline Artifact"
            inputs:
              buildType: "current"
              artifactName: $(buildArtifactName)
              targetPath: "$(Build.SourcesDirectory)/$(buildFolderName)"
          - task: PowerShell@2
            name: test
            displayName: "Run Unit Test for SP2019"
            inputs:
              filePath: "./build.ps1"
              arguments: "-Tasks test -PesterScript @(@{ Path = '$(Build.SourcesDirectory)/tests/Unit'; Parameters = @{SharePointCmdletModule = '$(Build.SourcesDirectory)/tests/Unit/Stubs/SharePoint/16.0.10337.12109/Microsoft.SharePoint.PowerShell.psm1' }})"
              pwsh: false

          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "NUnit"
              testResultsFiles: "$(buildFolderName)/$(testResultFolderName)/NUnit*.xml"
              testRunTitle: "Unit (SP2019)"

          - task: PublishPipelineArtifact@1
            displayName: "Publish CodeCoverage Artifact"
            inputs:
              targetPath: "$(buildFolderName)/$(testResultFolderName)/"
              artifactName: "CodeCoverage_2019"
              parallel: true

      - job: Test_Unit_SPSE
        displayName: "Unit SPSE"
        pool:
          vmImage: "windows-2022"
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Pipeline Artifact"
            inputs:
              buildType: "current"
              artifactName: $(buildArtifactName)
              targetPath: "$(Build.SourcesDirectory)/$(buildFolderName)"
          - task: PowerShell@2
            name: test
            displayName: "Run Unit Test for SPSE"
            inputs:
              filePath: "./build.ps1"
              arguments: "-Tasks test -PesterScript @(@{ Path = '$(Build.SourcesDirectory)/tests/Unit'; Parameters = @{SharePointCmdletModule = '$(Build.SourcesDirectory)/tests/Unit/Stubs/SharePoint/16.0.18526.20508/SharePointServer.psm1' }})"
              pwsh: false

          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "NUnit"
              testResultsFiles: "$(buildFolderName)/$(testResultFolderName)/NUnit*.xml"
              testRunTitle: "Unit (SPSE)"

          - task: PublishPipelineArtifact@1
            displayName: "Publish CodeCoverage Artifact"
            inputs:
              targetPath: "$(buildFolderName)/$(testResultFolderName)/"
              artifactName: "CodeCoverage_SPSE"
              parallel: true

      - job: Code_Coverage
        displayName: "Publish Code Coverage"
        dependsOn:
          - "Test_Unit_2013"
          - "Test_Unit_2016"
          - "Test_Unit_2019"
          - "Test_Unit_SPSE"
        pool:
          vmImage: "ubuntu-latest"
        timeoutInMinutes: 0
        steps:
          - pwsh: |
              $repositoryOwner,$repositoryName = $env:BUILD_REPOSITORY_NAME -split '/'
              echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
              echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
            name: dscBuildVariable
            displayName: "Set Environment Variables"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Pipeline Artifact"
            inputs:
              buildType: "current"
              artifactName: $(buildArtifactName)
              targetPath: "$(Build.SourcesDirectory)/$(buildFolderName)"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Test Artifact SP2013"
            inputs:
              buildType: "current"
              artifactName: "CodeCoverage_2013"
              targetPath: "$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCov2013"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Test Artifact SP2016"
            inputs:
              buildType: "current"
              artifactName: "CodeCoverage_2016"
              targetPath: "$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCov2016"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Test Artifact SP2019"
            inputs:
              buildType: "current"
              artifactName: "CodeCoverage_2019"
              targetPath: "$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCov2019"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Test Artifact SPSE"
            inputs:
              buildType: "current"
              artifactName: "CodeCoverage_SPSE"
              targetPath: "$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCovSPSE"

          - task: PowerShell@2
            name: merge
            displayName: "Merge Code Coverage files"
            inputs:
              filePath: "./build.ps1"
              arguments: "-Tasks merge"
              pwsh: true

          - task: PublishCodeCoverageResults@1
            displayName: "Publish Azure Code Coverage"
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: "JaCoCo"
              summaryFileLocation: "$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCov_Merged.xml"
              pathToSources: "$(Build.SourcesDirectory)/$(dscBuildVariable.RepositoryName)/"

          - script: |
              bash <(curl -s https://codecov.io/bash) -f "./$(buildFolderName)/$(testResultFolderName)/CodeCov_Merged.xml"
            displayName: "Upload to Codecov.io"
            condition: succeededOrFailed()

  - stage: Deploy
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], 'dsccommunity')
      )
    jobs:
      - job: Deploy_Module
        displayName: "Deploy Module"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Pipeline Artifact"
            inputs:
              buildType: "current"
              artifactName: $(buildArtifactName)
              targetPath: "$(Build.SourcesDirectory)/$(buildArtifactName)"

          - task: PowerShell@2
            name: publishRelease
            displayName: "Publish Release"
            inputs:
              filePath: "./build.ps1"
              arguments: "-tasks publish"
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)

          - task: PowerShell@2
            name: sendChangelogPR
            displayName: "Send Changelog PR"
            inputs:
              filePath: "./build.ps1"
              arguments: "-tasks Create_ChangeLog_GitHub_PR"
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
