---
####################################################
#          ModuleBuilder Configuration             #
####################################################

CopyPaths:
  - DSCResources
  - en-US
  - Modules
Encoding: UTF8
VersionedOutputDirectory: true

####################################################
#      ModuleBuilder Submodules Configuration      #
####################################################

NestedModule:
    DscResource.Common:
      CopyOnly: true
      Path: ./output/RequiredModules/DscResource.Common
      AddToManifest: false
      Exclude: PSGetModuleInfo.xml

####################################################
#       Sampler Pipeline Configuration             #
####################################################
BuildWorkflow:
  '.':
    - build
    - test

  build:
    - Clean
    - Build_Module_ModuleBuilder
    - Build_NestedModules_ModuleBuilder
    - Create_changelog_release_output
    #- Generate_Conceptual_Help
    - Generate_Wiki_Content

  pack:
    - build
    - package_module_nupkg

  hqrmtest:
    - Invoke_HQRM_Tests_Stop_On_Fail

  # Defining test task to be run when invoking `./build.ps1 -Tasks test`
  test:
    - Pester_Tests_Stop_On_Fail
    - Pester_if_Code_Coverage_Under_Threshold
    # Use this task when you have multiple parallel tests, which produce multiple
    # code coverage files and needs to get merged into one file.
    #- Merge_CodeCoverage_Files

  merge:
    - Merge_CodeCoverage_Files

  publish:
    - Publish_Release_To_GitHub
    - Publish_Module_To_Gallery
    - Publish_GitHub_Wiki_Content

####################################################
#       PESTER  Configuration                      #
####################################################

Pester:
  OutputFormat: NUnitXML
  # Excludes one or more paths from being used to calculate code coverage.
  ExcludeFromCodeCoverage:
    - Modules/DscResource.Common
  # If no scripts are defined the default is to use all the tests under the project's
  # tests folder or source folder (if present). Test script paths can be defined to
  # only run tests in certain folders, or run specific test files, or can be use to
  # specify the order tests are run.
  Script:
    - tests/Unit/SharePointDsc
  Tag:
  CodeCoverageThreshold: 73 # Set to 0 to bypass
  CodeCoverageOutputFile: CodeCoverage.xml
  CodeCoverageOutputFileEncoding: ascii

CodeCoverage:
  CodeCoverageMergedOutputFile: CodeCov_Merged.xml
  CodeCoverageFilePattern: Codecov*.xml

DscTest:
  ExcludeTag:
    - 'Common Tests - New Error-Level Script Analyzer Rules'
    - 'Common Tests - Validate Localization'
    - 'Common Tests - Validate Example Files To Be Published'
  Tag:
  ExcludeSourceFile:
    - output
  ExcludeModuleFile:
    - Modules/DscResource.Common

# Import ModuleBuilder tasks from a specific PowerShell module using the build
# task's alias. Wildcard * can be used to specify all tasks that has a similar
# prefix and or suffix. The module contain the task must be added as a required
# module in the file RequiredModules.psd1.
ModuleBuildTasks:
  Sampler:
    - '*.build.Sampler.ib.tasks'
  Sampler.GitHubTasks:
    - '*.ib.tasks'
  DscResource.DocGenerator:
    - 'Task.*'

# Invoke-Build Header to be used to 'decorate' the terminal output of the tasks.
TaskHeader: |
  param($Path)
  ""
  "=" * 79
  Write-Build Cyan "`t`t`t$($Task.Name.replace("_"," ").ToUpper())"
  Write-Build DarkGray  "$(Get-BuildSynopsis $Task)"
  "-" * 79
  Write-Build DarkGray "  $Path"
  Write-Build DarkGray "  $($Task.InvocationInfo.ScriptName):$($Task.InvocationInfo.ScriptLineNumber)"
  ""

GitHubConfig:
  GitHubFilesToAdd:
    - 'CHANGELOG.md'
  GitHubConfigUserName: dscbot
  GitHubConfigUserEmail: dsccommunity@outlook.com
  UpdateChangelogOnPrerelease: false

####################################################
#      DscResource.DocGenerator Configuration      #
####################################################
DscResource.DocGenerator:
  Generate_Conceptual_Help:
    MarkdownCodeRegularExpression:
      - '\(.+?\)' # Match inline code-block
      - '\\(\\)' # Match escaped backslash
      - '\[[^\[]+\]\((.+?)\)' # Match markdown URL
      - '_(.+?)_' # Match Italic (underscore)
      - '\*\*(.+?)\*\*' # Match bold
      - '\*(.+?)\*' # Match Italic (asterisk)
